function margin_histo(inputMatrix)
% Creates a marginal histogram of mean horizontal and vertical SPV
%
% Syntax:
%   margin_histo(inputMatrix)
%
% Description:
%   This function returns marginal histogram of mean x and y drift.
%   Ellipses indicate confidence interval. Blue ellipses indicate subjects
%   that detected infrared light
%
% Inputs:
%   inputMatrix         - String Array. Generated by the function
%                           read_all_runs
%
% Outputs:
%   none                - PDF. Exports marginal histogram. 
%
% Examples:
%	margin_histo(resultsMatrix)

% Pulls in data from inputMatrix
run_x = str2double(inputMatrix(2:size(inputMatrix,1),[2,6,10,14]));
run_y = str2double(inputMatrix(2:size(inputMatrix,1),[4,8,12,16]));
mean_run_x = str2double(inputMatrix(2:size(inputMatrix,1),18));
mean_run_y = str2double(inputMatrix(2:size(inputMatrix,1),20));

% Preps figure
clf;
set(gcf,'color','w','outerposition',[0 0 775 750]);
%figure('units','normalized','outerposition',[0 0 1 1])

% Axis limits for both scatterplot and histogram
axisLimits = 15;

% Axis limits determine edges for histogram
edges = zeros(axisLimits*2,1);
for i = -axisLimits:axisLimits
    edges(i+axisLimits+1)=i;
end

%Determines counts per bin
[nx,cx] = histcounts(mean_run_x,edges);
[ny,cy] = histcounts(mean_run_y,edges);

% Used to shift the histogram so that bars fall between bins
cx = cx + 0.5;
cx(end) = [];
cy = cy + 0.5;
cy(end) = [];

%Determines size of scatterplot
main = axes("Units","pixels","Position",[50 55 600 500]);

% Plots error ellipse for each point
for i = 1:size(run_x,1)
    C = cov(run_x(i,:)',run_y(i,:)','partialrows');
    row = str2double(inputMatrix(i+1,1));
    if row == 13 || row == 27 || row == 46 %these subjects detected infrared light
    [xpatch,ypatch] = error_ellipse_modified('C',C,'conf',0.68,'mu',[mean_run_x(i),mean_run_y(i)]);
    blue = patch(xpatch,ypatch,"r","edgecolor","r","edgealpha",0.3); hold on
    alpha(0.1);
    else 
    [xpatch,ypatch] = error_ellipse_modified('C',C,'conf',0.68,'mu',[mean_run_x(i),mean_run_y(i)]);
    red = patch(xpatch,ypatch,"r","edgecolor","r","edgealpha",0.3); hold on
    alpha(0.1);
    end
end

% Plots mean of x and mean of y as the center of the ellipse
scatter(mean_run_x,mean_run_y,15,"filled","k"); hold on

% Lines added to indicate 0
xline(0,'--k');
yline(0,'--k');

% Formatting tickmarks, axis limits, and labels
%legend([blue,red],'Perception of IR LED','No perception noted','Position',[0.61 0.75 0.22 0.06])
xticks(edges);
yticks(edges);
set(gca, 'TickDir', 'out');
box off;
axis padded;
axis equal;
xlimit = get(main,"Xlim");
ylimit = get(main,"Ylim");
xlim([xlimit(1) xlimit(2)]);
ylim([ylimit(1) ylimit(2)]);
xlabel("Horizontal slow phase velocity [deg/sec]")
ylabel("Vertical slow phase velocity [deg/sec]")
f=get(gcf,'Children');


% Pulls position of scatterplot and uses it to determine location of histogram
posMain = get(gca,"Position");
histHeight = 75; %in pixels
 
pos1 = [posMain(1) posMain(2)+posMain(4) posMain(3) histHeight];
pos2 = [posMain(1)+posMain(3) posMain(2) histHeight posMain(4)];

% Plots histograms
axes("Units","pixels","Position",pos2);
barh(cy,ny,1,"FaceColor",[0.35 0.35 0.35],"EdgeColor","none");
ylim([ylimit(1) ylimit(2)]); xlim([0 max([nx,ny])]); axis on; box off; hold on;
axes("Units","pixels","Position",pos1);
bar(cx,nx,1,"FaceColor",[0.35 0.35 0.35],"EdgeColor","none");
xlim([xlimit(1) xlimit(2)]); ylim([0 max([nx,ny])]); axis on; box off;

% Saves figure as a pdf
print(gcf, '-dpdf', 'Figure 2.pdf');
end

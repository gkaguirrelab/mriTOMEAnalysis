function mean_SPV_plot(inputMatrix)
% Generates a figure showing change in mean SPV with acquisition
%
% Syntax:
%   mean_SPV_plot(inputMatrix)
%
% Inputs:
%   inputMatrix         - String Array. Generated by the function
%                         read_all_runs
%
% Outputs:
%   none                - PDF. Generates error bars and 95% CI for mean
%                         SPV by acquisition
%
% Example:  
%   mean_SPV_plot(resultsMatrix)

% Pulls in data from inputMatrix
run_x = str2double(inputMatrix(2:size(inputMatrix,1),[2,6,10,14]));
run_y = str2double(inputMatrix(2:size(inputMatrix,1),[4,8,12,16]));

% Calculates SME for each acquisition
for i = 1:4
sme_run(i,1) = std(run_x(:,i),"omitnan")/sqrt(length(run_x(:,i)));
sme_run(i,2) = std(run_y(:,i),"omitnan")/sqrt(length(run_y(:,i)));
end

means = [mean(run_x,"omitnan")' mean(run_y,"omitnan")'];
labels = ["Horizontal slow phase velocity [deg/sec]", "Vertical slow phase velocity [deg/sec]"];

% Sets up template for figure
figure;
set(gcf,'color','w',"units","normalized",'outerposition',[0 0 0.7 1]);
tiledlayout(1,2);

for i = 1:2 %Horizontal and vertical SPV
tile = nexttile;
% Creates errorbars
errorbar(means(:,i),sme_run(:,i),"o","color",[0.4 0.4 0.4]); hold on
% Determines fit
mdl = fitlm([1 2 3 4],means(:,i),'linear','RobustOpts','on');
% This creates the plot, and returns the plot handle, fit
fit = mdl.plot; hold on 
% The commands below alter the appearance of the plot elements
fit(1).Marker = 'o';
fit(1).MarkerEdgeColor = 'none';
fit(1).MarkerFaceColor = [0.4 0.4 0.4];
fit(2).LineWidth = 2;
fit(3).LineStyle = '--';
fit(4).LineStyle = '--';

% Formatting and labelling figure
ylabel(labels(i))
xlim([0.5 4.5]);
ylim([-6 4])
xticks([1 2 3 4])
set(gca, 'TickDir', 'out'); box off
xticklabels(["Acquisition 1" "Acquisition 2" "Acquisition 3" "Acquisition 4"])
xlabel("")
title("")
legend([fit(1) fit(2) fit(3)],["Data" "Fit" "Confidence Bounds"],'Location','northwest');

% Adding annotation of slope and confidence interval
ci = mdl.coefCI;
ci = ci(2,:);
str = sprintf('slope [95%% CI] = %2.2f [%2.2f to %2.2f], p = %2.3f',mdl.Coefficients{2,1},ci,mdl.coefTest);
position = get(tile,"Position");
annotation("textbox","String",str,"EdgeColor","white","Position",[position(1)+0.08 position(2)-position(4)+0.7 position(3) position(4)],'FitBoxToText','on');
end

% Save figure as pdf
export_fig(gcf,"Figure 4","-pdf","-r500")
end
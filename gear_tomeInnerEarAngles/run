#!/anaconda3/bin/python3

import os, json, flywheel, shutil, tempfile, platform, imageio, vtk, time, csv
from vtk.util.numpy_support import numpy_to_vtk, vtk_to_numpy
from scipy.io import savemat
from ants.antsRegistration import registerImage, makeDiagnosticPlot
from nipype.interfaces.ants import Registration
from distutils.spawn import find_executable
import SimpleITK as sitk
import nibabel as nib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

###################### Define the Paths and parameters ###########################

# os.system('cat /proc/cpuinfo')

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
os.system('mkdir %s' % first_output_dir)
segmentation_script = '/segmentation_code/iemap_seg.py'
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v98' #path to MATLAB runtime
matlab_function = '/tmp/calculateSSCwrtBZero/run_calculateSSCwrtBZero.sh'

# Get the time series
image_path = os.path.join(flywheel_base, 'input/T1_or_T2_image')
image = os.path.join(image_path, os.listdir(image_path)[0])

###################Parse Config Here############################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

registration_quality = config['registration_quality']
n_threads = config['n_threads']
subject_id = config['subject_id']

###################Run Algorithm################################
os.environ['ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS'] = n_threads
os.system('/anaconda3/bin/python3 iemap_seg.py --input_head_volumes %s --matching_template_modalities_head T2 --input_ie_volumes %s --matching_template_modalities_ie T2 --output_dir %s --accuracy_head %s --accuracy_ie %s' % (image, image,
                                                                                                                                                                                                                                  first_output_dir,
                                                                                                                                                                                                                                  registration_quality,
                                                                                                                                                                                                                                  registration_quality))
context = flywheel.GearContext()
config = context.get_input('T1_or_T2_image')
input_id = config['hierarchy']['id']
fw = flywheel.Client('upenn.flywheel.io:8P7zdNhXBWiahwEGKt')
acquisition = fw.get(input_id)
file = acquisition.files[1]
vector = file.info['ImageOrientationPatientDICOM']
iop = os.path.join(first_output_dir, '%s_iop.mat' % subject_id)
savemat(iop, mdict={'iop': vector})

normal_folder = '/tmp/normals'
os.system('mkdir %s' % normal_folder)
os.system('cd %s; cp *.mat %s' % (os.path.join(first_output_dir, 'plane_normals'), normal_folder))

cmd = '%s %s %s %s %s %s' % (matlab_function, mcr_path, 
                              iop, normal_folder, subject_id,
                              final_output_dir)
                             
os.system(cmd)

################## Zip everything and output ##################################
os.system('cd %s; zip %s *' % (os.path.join(first_output_dir, 'plane_normals'), os.path.join(final_output_dir, '%s_plane_normals.zip' % subject_id)))
os.system('cp %s %s' % (os.path.join(first_output_dir, 'left_ear_images', 'diagnostic.gif'), os.path.join(final_output_dir, 'left_ear_registration_diagnostic.gif')))
os.system('cp %s %s' % (os.path.join(first_output_dir, 'right_ear_images', 'diagnostic.gif'), os.path.join(final_output_dir, 'right_ear_registration_diagnostic.gif')))
os.system('cp %s %s' % (iop, final_output_dir))
